# coding: utf-8

"""
    Workgroup Assistant API

    Workgroup assistant microservice in Researcher Hub  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def execute_login_post(self, name, password, **kwargs):  # noqa: E501
        """Submit a login with user credential payload for group member with existing AI service agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_login_post(name, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str password: (required)
        :param str inviter_default_app_id:
        :param str inviter_user_role:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_login_post_with_http_info(name, password, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_login_post_with_http_info(name, password, **kwargs)  # noqa: E501
            return data

    def execute_login_post_with_http_info(self, name, password, **kwargs):  # noqa: E501
        """Submit a login with user credential payload for group member with existing AI service agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_login_post_with_http_info(name, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str password: (required)
        :param str inviter_default_app_id:
        :param str inviter_user_role:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'password', 'inviter_default_app_id', 'inviter_user_role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_login_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `execute_login_post`")  # noqa: E501
        # verify the required parameter 'password' is set
        if self.api_client.client_side_validation and ('password' not in params or
                                                       params['password'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `password` when calling `execute_login_post`")  # noqa: E501

        if self.api_client.client_side_validation and ('name' in params and
                                                       len(params['name']) > 256):
            raise ValueError("Invalid value for parameter `name` when calling `execute_login_post`, length must be less than or equal to `256`")  # noqa: E501
        if self.api_client.client_side_validation and ('password' in params and
                                                       len(params['password']) > 256):
            raise ValueError("Invalid value for parameter `password` when calling `execute_login_post`, length must be less than or equal to `256`")  # noqa: E501
        if self.api_client.client_side_validation and ('inviter_default_app_id' in params and
                                                       len(params['inviter_default_app_id']) > 500):
            raise ValueError("Invalid value for parameter `inviter_default_app_id` when calling `execute_login_post`, length must be less than or equal to `500`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'name' in params:
            header_params['name'] = params['name']  # noqa: E501
        if 'password' in params:
            header_params['password'] = params['password']  # noqa: E501
        if 'inviter_default_app_id' in params:
            header_params['inviterDefaultAppId'] = params['inviter_default_app_id']  # noqa: E501
        if 'inviter_user_role' in params:
            header_params['inviterUserRole'] = params['inviter_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/execute-login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_logout_post(self, **kwargs):  # noqa: E501
        """Load logout payload as group member for existing AI service agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_logout_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_logout_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.execute_logout_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def execute_logout_post_with_http_info(self, **kwargs):  # noqa: E501
        """Load logout payload as group member for existing AI service agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_logout_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_logout_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/execute-logout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_signup_post(self, avatar, name, email, password, slackname, researchgate, default_app_id, default_app_description, **kwargs):  # noqa: E501
        """Commit a new sign-up application payload for group member with new AI service agent onto Researcher Hub  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_signup_post(avatar, name, email, password, slackname, researchgate, default_app_id, default_app_description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str avatar: (required)
        :param str name: (required)
        :param str email: (required)
        :param str password: (required)
        :param str slackname: (required)
        :param str researchgate: (required)
        :param str default_app_id: (required)
        :param str default_app_description: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_signup_post_with_http_info(avatar, name, email, password, slackname, researchgate, default_app_id, default_app_description, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_signup_post_with_http_info(avatar, name, email, password, slackname, researchgate, default_app_id, default_app_description, **kwargs)  # noqa: E501
            return data

    def execute_signup_post_with_http_info(self, avatar, name, email, password, slackname, researchgate, default_app_id, default_app_description, **kwargs):  # noqa: E501
        """Commit a new sign-up application payload for group member with new AI service agent onto Researcher Hub  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_signup_post_with_http_info(avatar, name, email, password, slackname, researchgate, default_app_id, default_app_description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str avatar: (required)
        :param str name: (required)
        :param str email: (required)
        :param str password: (required)
        :param str slackname: (required)
        :param str researchgate: (required)
        :param str default_app_id: (required)
        :param str default_app_description: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['avatar', 'name', 'email', 'password', 'slackname', 'researchgate', 'default_app_id', 'default_app_description']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_signup_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'avatar' is set
        if self.api_client.client_side_validation and ('avatar' not in params or
                                                       params['avatar'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `avatar` when calling `execute_signup_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `execute_signup_post`")  # noqa: E501
        # verify the required parameter 'email' is set
        if self.api_client.client_side_validation and ('email' not in params or
                                                       params['email'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `email` when calling `execute_signup_post`")  # noqa: E501
        # verify the required parameter 'password' is set
        if self.api_client.client_side_validation and ('password' not in params or
                                                       params['password'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `password` when calling `execute_signup_post`")  # noqa: E501
        # verify the required parameter 'slackname' is set
        if self.api_client.client_side_validation and ('slackname' not in params or
                                                       params['slackname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `slackname` when calling `execute_signup_post`")  # noqa: E501
        # verify the required parameter 'researchgate' is set
        if self.api_client.client_side_validation and ('researchgate' not in params or
                                                       params['researchgate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `researchgate` when calling `execute_signup_post`")  # noqa: E501
        # verify the required parameter 'default_app_id' is set
        if self.api_client.client_side_validation and ('default_app_id' not in params or
                                                       params['default_app_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `default_app_id` when calling `execute_signup_post`")  # noqa: E501
        # verify the required parameter 'default_app_description' is set
        if self.api_client.client_side_validation and ('default_app_description' not in params or
                                                       params['default_app_description'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `default_app_description` when calling `execute_signup_post`")  # noqa: E501

        if self.api_client.client_side_validation and ('name' in params and
                                                       len(params['name']) > 256):
            raise ValueError("Invalid value for parameter `name` when calling `execute_signup_post`, length must be less than or equal to `256`")  # noqa: E501
        if self.api_client.client_side_validation and ('password' in params and
                                                       len(params['password']) > 256):
            raise ValueError("Invalid value for parameter `password` when calling `execute_signup_post`, length must be less than or equal to `256`")  # noqa: E501
        if self.api_client.client_side_validation and ('slackname' in params and
                                                       len(params['slackname']) > 256):
            raise ValueError("Invalid value for parameter `slackname` when calling `execute_signup_post`, length must be less than or equal to `256`")  # noqa: E501
        if self.api_client.client_side_validation and ('researchgate' in params and
                                                       len(params['researchgate']) > 256):
            raise ValueError("Invalid value for parameter `researchgate` when calling `execute_signup_post`, length must be less than or equal to `256`")  # noqa: E501
        if self.api_client.client_side_validation and ('default_app_id' in params and
                                                       len(params['default_app_id']) > 500):
            raise ValueError("Invalid value for parameter `default_app_id` when calling `execute_signup_post`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('default_app_description' in params and
                                                       len(params['default_app_description']) > 500):
            raise ValueError("Invalid value for parameter `default_app_description` when calling `execute_signup_post`, length must be less than or equal to `500`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'avatar' in params:
            header_params['avatar'] = params['avatar']  # noqa: E501
        if 'name' in params:
            header_params['name'] = params['name']  # noqa: E501
        if 'email' in params:
            header_params['email'] = params['email']  # noqa: E501
        if 'password' in params:
            header_params['password'] = params['password']  # noqa: E501
        if 'slackname' in params:
            header_params['slackname'] = params['slackname']  # noqa: E501
        if 'researchgate' in params:
            header_params['researchgate'] = params['researchgate']  # noqa: E501
        if 'default_app_id' in params:
            header_params['defaultAppID'] = params['default_app_id']  # noqa: E501
        if 'default_app_description' in params:
            header_params['defaultAppDescription'] = params['default_app_description']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/execute-signup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def load_login_post(self, id, **kwargs):  # noqa: E501
        """Load login payload as group member for existing AI service agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_login_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str inviteremail:
        :param str inviter_default_app_id:
        :param str inviter_user_role:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.load_login_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.load_login_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def load_login_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Load login payload as group member for existing AI service agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_login_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str inviteremail:
        :param str inviter_default_app_id:
        :param str inviter_user_role:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inviteremail', 'inviter_default_app_id', 'inviter_user_role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method load_login_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `load_login_post`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and params['id'] > 5000000):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `load_login_post`, must be a value less than or equal to `5000000`")  # noqa: E501
        if self.api_client.client_side_validation and ('id' in params and params['id'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `load_login_post`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('inviter_default_app_id' in params and
                                                       len(params['inviter_default_app_id']) > 500):
            raise ValueError("Invalid value for parameter `inviter_default_app_id` when calling `load_login_post`, length must be less than or equal to `500`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'id' in params:
            header_params['id'] = params['id']  # noqa: E501
        if 'inviteremail' in params:
            header_params['inviteremail'] = params['inviteremail']  # noqa: E501
        if 'inviter_default_app_id' in params:
            header_params['inviterDefaultAppId'] = params['inviter_default_app_id']  # noqa: E501
        if 'inviter_user_role' in params:
            header_params['inviterUserRole'] = params['inviter_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/load-login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def load_members_profile_post(self, id, **kwargs):  # noqa: E501
        """Get member's profile and voting preferences of AI service agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_members_profile_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.load_members_profile_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.load_members_profile_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def load_members_profile_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get member's profile and voting preferences of AI service agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_members_profile_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method load_members_profile_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `load_members_profile_post`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and params['id'] > 5000000):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `load_members_profile_post`, must be a value less than or equal to `5000000`")  # noqa: E501
        if self.api_client.client_side_validation and ('id' in params and params['id'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `load_members_profile_post`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'id' in params:
            header_params['id'] = params['id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/load-members-profile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def load_signup_post(self, id, **kwargs):  # noqa: E501
        """Load sign-up application payload as group member for new AI service agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_signup_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str inviteremail:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.load_signup_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.load_signup_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def load_signup_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Load sign-up application payload as group member for new AI service agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_signup_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str inviteremail:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inviteremail']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method load_signup_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `load_signup_post`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and params['id'] > 5000000):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `load_signup_post`, must be a value less than or equal to `5000000`")  # noqa: E501
        if self.api_client.client_side_validation and ('id' in params and params['id'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `load_signup_post`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'id' in params:
            header_params['id'] = params['id']  # noqa: E501
        if 'inviteremail' in params:
            header_params['inviteremail'] = params['inviteremail']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/load-signup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def load_workgroup_post(self, id, default_app_id, **kwargs):  # noqa: E501
        """Get workgroup for AI service agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_workgroup_post(id, default_app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str default_app_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.load_workgroup_post_with_http_info(id, default_app_id, **kwargs)  # noqa: E501
        else:
            (data) = self.load_workgroup_post_with_http_info(id, default_app_id, **kwargs)  # noqa: E501
            return data

    def load_workgroup_post_with_http_info(self, id, default_app_id, **kwargs):  # noqa: E501
        """Get workgroup for AI service agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_workgroup_post_with_http_info(id, default_app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str default_app_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'default_app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method load_workgroup_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `load_workgroup_post`")  # noqa: E501
        # verify the required parameter 'default_app_id' is set
        if self.api_client.client_side_validation and ('default_app_id' not in params or
                                                       params['default_app_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `default_app_id` when calling `load_workgroup_post`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and params['id'] > 5000000):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `load_workgroup_post`, must be a value less than or equal to `5000000`")  # noqa: E501
        if self.api_client.client_side_validation and ('id' in params and params['id'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `load_workgroup_post`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('default_app_id' in params and
                                                       len(params['default_app_id']) > 500):
            raise ValueError("Invalid value for parameter `default_app_id` when calling `load_workgroup_post`, length must be less than or equal to `500`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'id' in params:
            header_params['id'] = params['id']  # noqa: E501
        if 'default_app_id' in params:
            header_params['defaultAppID'] = params['default_app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/load-workgroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
